package runtimetest;

import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author alejandro.degante
 */
public class RuntimeTestVentana extends javax.swing.JFrame {

    /**
     * Creates new form Ventana
     */
    public RuntimeTestVentana() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jButton1.setFont(new java.awt.Font("Courier New", 1, 24)); // NOI18N
        jButton1.setForeground(new java.awt.Color(0, 153, 204));
        jButton1.setText("CLICK");
        jButton1.setToolTipText("Inicio");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jTextField1)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 52, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        System.out.println("Inicio");
        String entrada = jTextField1.getText();
        
        try {
            //Inicia compilación
            Process build = Runtime.getRuntime().exec("g++ -std=c++11 -o b1 lexerContent/main.cpp");
            try {
                build.waitFor();
                //Termina compilación
            } catch (InterruptedException ex) {
                Logger.getLogger(RuntimeTestVentana.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        
        //Inicia paralelo:
        long pStart = System.currentTimeMillis();
        
        try {
            int nConsumidores = Integer.parseInt(entrada);
            System.out.println("Número de Consumidores " + nConsumidores);
            
            Almacen a = new Almacen();
            Productor p = new Productor(0, a);
            Consumidor[] c = new Consumidor[nConsumidores];
            
            for (int i=0 ; i<nConsumidores ; i++) {
                c[i] = new Consumidor(i + 1, a);
                c[i].start();
            }
            
            p.start();
            //Acaba paralelo
            
            long pEnd = System.currentTimeMillis();
            long pTime = pEnd-pStart;
            
            //Inicia secuencial:
            
            long sStart = System.currentTimeMillis();
            try {
                String archivo;
                List<String> ArchivosLista = new Vector<String>();
                String fileName = "lexerContent/srcTxtFiles";
                File folder = new File(fileName);
                try{ 
                    Process process = null;
                    File[] listOfFiles = folder.listFiles();
                        for (int i = 0; i < listOfFiles.length; i++) {
                            if (listOfFiles[i].isFile()) {
                                archivo = listOfFiles[i].getName();
                                if (!archivo.equals(".DS_Store")){
                                    try {
                                        process = Runtime.getRuntime().exec("./b1 "+ archivo);
                                    } catch (IOException ex) {
                                        Logger.getLogger(Consumidor.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                }
                            } else if (listOfFiles[i].isDirectory()) {
                                System.out.println("Directory " + listOfFiles[i].getName());
                            }
                        }
            }catch(NullPointerException exception){
               System.out.println("File " + fileName + " not found");
            }
        }catch (NumberFormatException ex) {
            Logger.getLogger(RuntimeTestVentana.class.getName()).log(Level.SEVERE, null, ex);
        }
            
        //Acaba secuencial:
        long sEnd = System.currentTimeMillis();
        long sTime = sEnd-sStart;
        double speedUp = (double) sTime/pTime;
        
        System.out.println("Paralelo: "+pTime+" ms");
        System.out.println("Secuencial: "+sTime+" ms");
        System.out.println("Speedup: "+speedUp);
            
        } catch (NumberFormatException ex) {
            Logger.getLogger(RuntimeTestVentana.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    
    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        System.out.println("Terminado");
    }//GEN-LAST:event_formWindowClosing
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) throws InterruptedException {
        
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RuntimeTestVentana().setVisible(true);
            }
        });
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
